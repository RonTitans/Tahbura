// Extract Unique Values from Hebrew Inspection Excel
// ◊ó◊ô◊ú◊ï◊• ◊¢◊®◊õ◊ô◊ù ◊ô◊ô◊ó◊ï◊ì◊ô◊ô◊ù ◊û◊ß◊ï◊ë◊• ◊î◊ê◊ß◊°◊ú ◊©◊ú ◊û◊¢◊®◊õ◊™ ◊î◊ë◊ì◊ô◊ß◊ï◊™ ◊î◊¢◊ë◊®◊ô◊™

import XLSX from 'xlsx'
import fs from 'fs'

const extractUniqueValues = (filePath) => {
  console.log(`üìä Extracting unique values from: ${filePath}`)
  
  const workbook = XLSX.readFile(filePath)
  const result = {
    mainSheet: {},
    valuesSheet: {},
    columnMappings: {},
    summary: {}
  }
  
  // Process main sheet (◊ò◊ë◊ú◊î ◊û◊®◊õ◊ñ◊™)
  const mainSheetName = '◊ò◊ë◊ú◊î ◊û◊®◊õ◊ñ◊™'
  if (workbook.Sheets[mainSheetName]) {
    const mainData = XLSX.utils.sheet_to_json(workbook.Sheets[mainSheetName], { header: 1 })
    
    // Headers are at row 4 (index 3)
    const headers = mainData[3] || []
    const dataRows = mainData.slice(4)
    
    console.log(`üìã Main sheet headers:`, headers.filter(h => h))
    
    // Extract unique values for each column
    headers.forEach((header, index) => {
      if (!header) return
      
      const cleanHeader = header.replace(/\r\n/g, ' ')
      const columnValues = dataRows
        .map(row => row[index])
        .filter(val => val !== null && val !== undefined && val !== '')
        .map(val => String(val).trim())
      
      const uniqueValues = [...new Set(columnValues)]
      
      result.mainSheet[cleanHeader] = {
        totalCount: columnValues.length,
        uniqueCount: uniqueValues.length,
        uniqueValues: uniqueValues.slice(0, 50), // First 50 unique values
        sampleValues: columnValues.slice(0, 10)
      }
      
      console.log(`   ${cleanHeader}: ${uniqueValues.length} unique values (${columnValues.length} total)`)
    })
  }
  
  // Process values sheet (◊¢◊®◊õ◊ô◊ù)
  const valuesSheetName = '◊¢◊®◊õ◊ô◊ù'
  if (workbook.Sheets[valuesSheetName]) {
    const valuesData = XLSX.utils.sheet_to_json(workbook.Sheets[valuesSheetName], { header: 1 })
    
    console.log(`\nüìä Values sheet analysis:`)
    console.log(`   Rows: ${valuesData.length}`)
    
    // Find columns with meaningful data
    const maxCols = Math.max(...valuesData.map(row => row.length))
    
    for (let colIndex = 0; colIndex < maxCols; colIndex++) {
      const columnValues = valuesData
        .map(row => row[colIndex])
        .filter(val => val !== null && val !== undefined && val !== '')
        .map(val => String(val).trim())
      
      if (columnValues.length > 0) {
        const uniqueValues = [...new Set(columnValues)]
        const columnName = `Column_${colIndex + 1}` + (columnValues[0] ? `_${columnValues[0].substring(0, 10)}` : '')
        
        result.valuesSheet[columnName] = {
          totalCount: columnValues.length,
          uniqueCount: uniqueValues.length,
          uniqueValues: uniqueValues.slice(0, 100), // More values for lookup tables
          allValues: uniqueValues // Store all for critical lookups
        }
        
        console.log(`   ${columnName}: ${uniqueValues.length} unique values`)
        
        // Show first few values for context
        if (uniqueValues.length <= 20) {
          console.log(`     Values: ${uniqueValues.slice(0, 10).join(', ')}${uniqueValues.length > 10 ? '...' : ''}`)
        }
      }
    }
  }
  
  // Generate column mappings for database design
  result.columnMappings = {
    '◊û◊ë◊†◊î': 'building_code',
    '◊û◊†◊î◊ú ◊û◊ë◊†◊î': 'building_manager',
    '◊¶◊ï◊ï◊™ ◊ê◊ì◊ï◊ù': 'red_team',
    '◊°◊ï◊í ◊î◊ë◊ì◊ô◊ß◊î': 'inspection_type',
    '◊û◊ï◊ë◊ô◊ú ◊î◊ë◊ì◊ô◊ß◊î': 'inspection_leader',
    '◊°◊ë◊ë ◊ë◊ì◊ô◊ß◊ï◊™': 'inspection_round',
    '◊®◊í◊ï◊ú◊ò◊ï◊® 1': 'regulator_1',
    '◊®◊í◊ï◊ú◊ò◊ï◊® 2': 'regulator_2', 
    '◊®◊í◊ï◊ú◊ò◊ï◊® 3': 'regulator_3',
    '◊®◊í◊ï◊ú◊ò◊ï◊® 4': 'regulator_4',
    '◊ú◊ï◊ñ ◊ë◊ô◊¶◊ï◊¢ ◊û◊™◊ï◊ê◊ù/ ◊®◊ô◊ê◊ú◊ô': 'scheduled_execution_date',
    '◊ô◊¢◊ì ◊ú◊°◊ô◊ï◊ù': 'target_completion_date',
    '◊î◊ê◊ù ◊û◊™◊ï◊ê◊ù ◊û◊ï◊ú ◊ñ◊õ◊ô◊ô◊ü?': 'coordinated_with_contractor',
    '◊¶◊®◊ï◊§◊™ ◊ì◊ï◊ó ◊ú◊ô◊ß◊ï◊ô◊ô◊ù': 'defects_report_attached',
    '◊î◊ê◊ù ◊î◊ì◊ï◊ó ◊î◊ï◊§◊•': 'report_distributed',
    '◊™◊ê◊®◊ô◊ö ◊î◊§◊¶◊™ ◊î◊ì◊ï◊ó': 'report_distribution_date',
    '◊ë◊ì◊ô◊ß◊î ◊ó◊ï◊ñ◊®◊™': 'follow_up_inspection',
    '◊î◊™◊®◊©◊û◊ï◊™ ◊û◊î◊ë◊ì◊ô◊ß◊î': 'inspection_notes'
  }
  
  // Generate summary statistics
  result.summary = {
    totalInspections: result.mainSheet['◊û◊ë◊†◊î']?.totalCount || 0,
    uniqueBuildings: result.mainSheet['◊û◊ë◊†◊î']?.uniqueCount || 0,
    uniqueInspectionTypes: result.mainSheet['◊°◊ï◊í ◊î◊ë◊ì◊ô◊ß◊î']?.uniqueCount || 0,
    uniqueInspectionLeaders: result.mainSheet['◊û◊ï◊ë◊ô◊ú ◊î◊ë◊ì◊ô◊ß◊î']?.uniqueCount || 0,
    uniqueBuildingManagers: result.mainSheet['◊û◊†◊î◊ú ◊û◊ë◊†◊î']?.uniqueCount || 0
  }
  
  return result
}

// Save extracted data
const saveExtractedData = (data, outputPath) => {
  fs.writeFileSync(outputPath, JSON.stringify(data, null, 2), 'utf8')
  console.log(`üíæ Extracted data saved to: ${outputPath}`)
}

// Generate database schema insights
const generateSchemaInsights = (data) => {
  console.log(`\nüîç DATABASE SCHEMA INSIGHTS:`)
  console.log(`=====================================`)
  
  console.log(`\nüìä MAIN ENTITIES:`)
  console.log(`‚Ä¢ Buildings: ${data.summary.uniqueBuildings} unique`)
  console.log(`‚Ä¢ Inspection Types: ${data.summary.uniqueInspectionTypes} unique`)
  console.log(`‚Ä¢ Inspection Leaders: ${data.summary.uniqueInspectionLeaders} unique`)
  console.log(`‚Ä¢ Building Managers: ${data.summary.uniqueBuildingManagers} unique`)
  console.log(`‚Ä¢ Total Inspections: ${data.summary.totalInspections}`)
  
  console.log(`\nüè¢ BUILDINGS:`)
  if (data.mainSheet['◊û◊ë◊†◊î']) {
    console.log(`   Sample building codes: ${data.mainSheet['◊û◊ë◊†◊î'].sampleValues.slice(0, 10).join(', ')}`)
  }
  
  console.log(`\nüîç INSPECTION TYPES:`)
  if (data.mainSheet['◊°◊ï◊í ◊î◊ë◊ì◊ô◊ß◊î']) {
    console.log(`   Sample types: ${data.mainSheet['◊°◊ï◊í ◊î◊ë◊ì◊ô◊ß◊î'].uniqueValues.slice(0, 5).join(', ')}`)
  }
  
  console.log(`\nüë• INSPECTION LEADERS:`)
  if (data.mainSheet['◊û◊ï◊ë◊ô◊ú ◊î◊ë◊ì◊ô◊ß◊î']) {
    console.log(`   Leaders: ${data.mainSheet['◊û◊ï◊ë◊ô◊ú ◊î◊ë◊ì◊ô◊ß◊î'].uniqueValues.join(', ')}`)
  }
  
  console.log(`\nüèóÔ∏è BUILDING MANAGERS:`)
  if (data.mainSheet['◊û◊†◊î◊ú ◊û◊ë◊†◊î']) {
    console.log(`   Managers: ${data.mainSheet['◊û◊†◊î◊ú ◊û◊ë◊†◊î'].uniqueValues.join(', ')}`)
  }
  
  console.log(`\nüìã RECOMMENDED TABLES:`)
  console.log(`1. buildings (building_code, name_hebrew, manager_id, is_active)`)
  console.log(`2. users (id, name_hebrew, role, email, is_active)`)
  console.log(`3. inspection_types (id, name_hebrew, category, estimated_duration)`)
  console.log(`4. inspections (id, building_id, type_id, leader_id, round, status)`)
  console.log(`5. inspection_regulators (inspection_id, regulator_name, position)`)
  console.log(`6. inspection_reports (inspection_id, report_attached, distributed, notes)`)
}

// Main execution
const main = () => {
  try {
    const filePath = 'F:\\ClaudeCode\\work\\inspection-tracker\\inspections.xlsx'
    const outputPath = 'F:\\ClaudeCode\\work\\inspection-tracker\\analysis\\unique-values.json'
    
    const extractedData = extractUniqueValues(filePath)
    saveExtractedData(extractedData, outputPath)
    generateSchemaInsights(extractedData)
    
    console.log(`\n‚úÖ Unique values extraction completed!`)
    
  } catch (error) {
    console.error('‚ùå Error:', error.message)
    process.exit(1)
  }
}

main()